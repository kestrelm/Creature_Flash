/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include "AS3/AS3.h"
#define swig_as3(X) inline_as3("import com.adobe.flascc.swig.*; " X)


/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) {int msglen = strlen(msg);__asm__ volatile ("throw new Exception(CModule.readString(%0, %1))": : "r"(msg), "r"(msglen));}



#include "CreatureLayer.h"

__attribute__((annotate("as3sig:public function _wrap_LoadCreatureFromFilename(filename_in:String):int")))
void _wrap_LoadCreatureFromFilename() {
  char *arg1 = (char *) 0 ;
  int result ;
  
  {
    AS3_MallocString(arg1, filename_in);
  }
  result = (int)LoadCreatureFromFilename(arg1);
  {
    free(arg1);
  }
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_LoadCreatureFromZipFilename(filename_in:String):int")))
void _wrap_LoadCreatureFromZipFilename() {
  char *arg1 = (char *) 0 ;
  int result ;
  
  {
    AS3_MallocString(arg1, filename_in);
  }
  result = (int)LoadCreatureFromZipFilename(arg1);
  {
    free(arg1);
  }
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_CreateCreature(load_data:int):int")))
void _wrap_CreateCreature() {
  int arg1 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, load_data);
  }
  result = (int)CreateCreature(arg1);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_CreateCreatureAnimation(load_data:int, name_in:String):int")))
void _wrap_CreateCreatureAnimation() {
  CreatureModule::CreatureLoadDataPacket *arg1 = (CreatureModule::CreatureLoadDataPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, load_data);
  }
  {
    AS3_MallocString(arg2, name_in);
  }
  result = (int)CreateCreatureAnimation(arg1,arg2);
  {
    free(arg2);
  }
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_CreateCreatureManager(target_creature_in:int):int")))
void _wrap_CreateCreatureManager() {
  int arg1 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, target_creature_in);
  }
  result = (int)CreateCreatureManager(arg1);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_AddCreatureManagerAnimation(manager_in:int, animation_in:int):void")))
void _wrap_AddCreatureManagerAnimation() {
  int arg1 ;
  int arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, manager_in);
  }
  {
    AS3_GetScalarFromVar(arg2, animation_in);
  }
  AddCreatureManagerAnimation(arg1,arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SetCreatureManagerActiveAnimation(manager_in:int, animation_name:String):void")))
void _wrap_SetCreatureManagerActiveAnimation() {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  {
    AS3_GetScalarFromVar(arg1, manager_in);
  }
  {
    AS3_MallocString(arg2, animation_name);
  }
  SetCreatureManagerActiveAnimation(arg1,arg2);
  {
    free(arg2);
  }
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SetCreatureManagerIsPlaying(manager_in:int, flag:Boolean):void")))
void _wrap_SetCreatureManagerIsPlaying() {
  int arg1 ;
  bool arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, manager_in);
  }
  {
    AS3_GetScalarFromVar(arg2, flag);
  }
  SetCreatureManagerIsPlaying(arg1,arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SetCreatureManagerSetShouldLoop(manager_in:int, flag:Boolean):void")))
void _wrap_SetCreatureManagerSetShouldLoop() {
  int arg1 ;
  bool arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, manager_in);
  }
  {
    AS3_GetScalarFromVar(arg2, flag);
  }
  SetCreatureManagerSetShouldLoop(arg1,arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_UpdateCreatureManager(manager_in:int, delta:Number):void")))
void _wrap_UpdateCreatureManager() {
  int arg1 ;
  float arg2 ;
  
  {
    AS3_GetScalarFromVar(arg1, manager_in);
  }
  {
    AS3_GetScalarFromVar(arg2, delta);
  }
  UpdateCreatureManager(arg1,arg2);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_SetActiveCreature(creature_in:int):void")))
void _wrap_SetActiveCreature() {
  int arg1 ;
  
  {
    AS3_GetScalarFromVar(arg1, creature_in);
  }
  SetActiveCreature(arg1);
  {
    
  }
  {
    AS3_ReturnAS3Var(undefined);
  }
}


__attribute__((annotate("as3sig:public function _wrap_GetCreatureTotalNumIndices():int")))
void _wrap_GetCreatureTotalNumIndices() {
  int result ;
  
  result = (int)GetCreatureTotalNumIndices();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_GetCreatureTotalNumPoints():int")))
void _wrap_GetCreatureTotalNumPoints() {
  int result ;
  
  result = (int)GetCreatureTotalNumPoints();
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_GetCreatureUV_Val(idx:int):Number")))
void _wrap_GetCreatureUV_Val() {
  int arg1 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, idx);
  }
  result = (float)GetCreatureUV_Val(arg1);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_GetCreatureIndice_Val(idx:int):int")))
void _wrap_GetCreatureIndice_Val() {
  int arg1 ;
  int result ;
  
  {
    AS3_GetScalarFromVar(arg1, idx);
  }
  result = (int)GetCreatureIndice_Val(arg1);
  {
    AS3_DeclareVar(asresult, int);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_GetCreatureGlobalPoint_Val(idx:int):Number")))
void _wrap_GetCreatureGlobalPoint_Val() {
  int arg1 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, idx);
  }
  result = (float)GetCreatureGlobalPoint_Val(arg1);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


__attribute__((annotate("as3sig:public function _wrap_GetCreatureRenderPoint_Val(idx:int):Number")))
void _wrap_GetCreatureRenderPoint_Val() {
  int arg1 ;
  float result ;
  
  {
    AS3_GetScalarFromVar(arg1, idx);
  }
  result = (float)GetCreatureRenderPoint_Val(arg1);
  {
    AS3_DeclareVar(asresult, Number);
    AS3_CopyScalarToVar(asresult, result);
  }
  {
    AS3_ReturnAS3Var(asresult);
  }
}


